plugins {
	id 'org.springframework.boot' version '2.7.3'
	id 'io.spring.dependency-management' version '1.0.13.RELEASE'
	id 'java'
	id 'com.gorylenko.gradle-git-properties' version '2.2.2'															// https://github.com/n0mer/gradle-git-properties
	id 'org.unbroken-dome.test-sets' version '3.0.1'
}

group = 'suffix.company.product'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	javaFakerVersion = '1.0.2'
	logbackEncoderVersion = '6.6'
	testcontainersVersion = '1.17.3'
	swaggerVersion = '3.0.0'
	snippetsDir= 'build/generated-snippets'
}

dependencyManagement {
	imports {
		mavenBom(org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES)
		mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
	}
	dependencies {
		dependency "com.github.javafaker:javafaker:${javaFakerVersion}"
		dependency "net.logstash.logback:logstash-logback-encoder:${logbackEncoderVersion}"
		dependency "io.springfox:springfox-boot-starter:${swaggerVersion}"
	}
}

dependencies {
	implementation ('com.github.javafaker:javafaker') {
		exclude group: 'org.yaml', module: 'snakeyaml'
	}
	implementation 'net.logstash.logback:logstash-logback-encoder'
	implementation 'io.springfox:springfox-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-data-rest'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.liquibase:liquibase-core'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.testcontainers:junit-jupiter'
	testImplementation 'org.testcontainers:postgresql'
}

test {
	outputs.dir snippetsDir
	filter{
		excludeTestsMatching "*IT"
	}
	useJUnitPlatform()
}

testSets {
	integrationTest { dirName = 'test' }
}

integrationTest {
	outputs.dir snippetsDir
	filter{
		includeTestsMatching "*IT"
	}
	useJUnitPlatform()
}

tasks.named('test') {
	useJUnitPlatform()
}

task copyDependencies(type: Copy) {
	from configurations.runtimeClasspath
	into 'build/libs'
}

task buildWithinDocker {
	jar {
		enabled = true
	}
	gitProperties {
		failOnNoGitDirectory false
	}
	dependsOn jar
}

bootJar {
	archiveFileName = 'component.jar'
}
