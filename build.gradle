plugins {
	id 'org.springframework.boot' version '3.3.3'																		// https://plugins.gradle.org/plugin/org.springframework.boot
	id 'io.spring.dependency-management' version '1.1.6'																// https://plugins.gradle.org/plugin/io.spring.dependency-management
	id 'java'																											// https://docs.gradle.org/current/userguide/java_plugin.html
	id 'org.unbroken-dome.test-sets' version '4.1.0'																	// https://plugins.gradle.org/plugin/org.unbroken-dome.test-sets
	id 'jacoco'																											// https://docs.gradle.org/current/userguide/jacoco_plugin.html
	id 'idea'																											// https://docs.gradle.org/current/userguide/idea_plugin.html
	id 'checkstyle'																										// https://docs.gradle.org/current/userguide/checkstyle_plugin.html
}

group = 'suffix.company.product'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

checkstyle {
	toolVersion = '10.12.4'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext['java-faker.version'] = '1.0.2'
ext['logback-encoder.version'] = '8.0'
ext['testcontainers.version'] = '1.20.1'
ext['modelmapper.version'] = '3.2.1'
ext['springdoc-openapi.version'] = '1.8.0'

ext {
	set('snippetsDir', file("build/generated-snippets"))
}

dependencyManagement {

	imports {
		mavenBom(org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES)
		mavenBom "org.testcontainers:testcontainers-bom:${ext['testcontainers.version']}"
	}
	dependencies {
		dependency "com.github.javafaker:javafaker:${ext['java-faker.version']}"
		dependency "org.modelmapper:modelmapper:${ext['modelmapper.version']}"
		dependency "net.logstash.logback:logstash-logback-encoder:${ext['logback-encoder.version']}"
		dependency "org.springdoc:springdoc-openapi-ui:${ext['springdoc-openapi.version']}"
		dependency "org.springdoc:springdoc-openapi-data-rest:${ext['springdoc-openapi.version']}"
	}
}

dependencies {
	implementation ('com.github.javafaker:javafaker') {
		exclude group: 'org.yaml', module: 'snakeyaml'
	}
	implementation 'net.logstash.logback:logstash-logback-encoder'
	implementation 'org.modelmapper:modelmapper'
	implementation 'org.springdoc:springdoc-openapi-ui'
	implementation 'org.springdoc:springdoc-openapi-data-rest'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-data-rest'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.liquibase:liquibase-core'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.testcontainers:junit-jupiter'
	testImplementation 'org.testcontainers:postgresql'
	checkstyle 'io.spring.javaformat:spring-javaformat-checkstyle:0.0.43'
}

/**
 * Configure Checkstyle
 */
tasks.withType(Checkstyle) {
	reports {
		xml.required = false
		html.required = true
	}
}

/**
 * Configure Tests
 */
tasks.named("test") {
	outputs.dir 'build/generated-snippets'
	filter {
		excludeTestsMatching "*IT"
	}
	jacoco {
		destinationFile = layout.buildDirectory.file('jacoco/jacocoTest.exec').get().asFile
		classDumpDir = layout.buildDirectory.dir('jacoco/classpathdumps').get().asFile
	}
	testLogging {
		// We want to know the status of all the tests.
		events("passed", "skipped", "failed")

		// Show stdout and stderr when running tests.
		showStandardStreams = true

		// When an exception is thrown, show the relevant part of the
		// stacktrace.
		showStackTraces = true
		exceptionFormat = 'full'
	}
	useJUnitPlatform()
}

/**
 * Configure Test Set
 */
testSets {
	integrationTest { dirName = 'test' }
}

/**
 * Task to run integration tests
 */
integrationTest {
	outputs.dir 'build/generated-snippets'
	filter {
		includeTestsMatching "*IT"
	}
	jacoco {
		destinationFile = layout.buildDirectory.file('jacoco/jacocoTest.exec').get().asFile
		classDumpDir = layout.buildDirectory.dir('jacoco/classpathdumps').get().asFile
	}
	useJUnitPlatform()
}

/**
 * Configure Jacoco Reports
 */
jacocoTestReport {
	reports {
		xml.required = true
	}
	dependsOn test
}

jacocoIntegrationTestReport  {
	reports {
		xml.required = true
	}
	dependsOn integrationTest
}

tasks.named("bootJar") {
	archiveFileName = 'component.jar'
}

tasks.named("jar") {
	enabled = false
}
